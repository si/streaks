// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum GoalCategory {
  FITNESS
  CREATIVITY
  ENTERTAINMENT
  PRODUCTIVITY
  LIFE_SOCIAL
}

enum LookbackPeriod {
  THIS_YEAR
  DAYS_30
  ALL
}

enum ProviderId {
  spotify
  strava
  github
  letterboxd
  goodreads
  swarm
  rss
  activitypub
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  preferences   UserPreference?
  connections   UserConnection[]
  onboarding    OnboardingState?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserPreference {
  id            String         @id @default(cuid())
  userId        String         @unique
  goalCategory  GoalCategory?
  lookbackPeriod LookbackPeriod @default(THIS_YEAR)
  commsOptIn    Boolean        @default(false)
  timezone      String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserConnection {
  id             String      @id @default(cuid())
  userId         String
  providerId     ProviderId
  externalUserId String?
  accessToken    String?
  refreshToken   String?
  scope          String?
  expiresAt      DateTime?
  config         Json?
  visibility     String      @default("private")
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, providerId, externalUserId])
}

model OnboardingState {
  id                String   @id @default(cuid())
  userId            String   @unique
  step              Int      @default(1)
  goalSet           Boolean  @default(false)
  providersHint     String?
  selectedProviders String[] @default([])
  lookbackSet       Boolean  @default(false)
  completed         Boolean  @default(false)
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}